% TestScoreSubjectResponses.m
% Author: Kevin Chu
% Last Modified: 02/18/2020

classdef TestScoreSubjectResponses < matlab.unittest.TestCase
    % Perform unit tests on functions called by scoreSubjectResponses.m
   
    properties (TestParameter)
        
        % testParseFilename
        file_parse_cases = struct('test1', struct('filename', 'HINT_L1_s1.wav', 'list', 1, 'sent', 1),...
                                  'test2', struct('filename', 'HINT_L1_s2.wav', 'list', 1, 'sent', 2),...
                                  'test3', struct('filename', 'HINT_L1_s10.wav', 'list', 1, 'sent', 10),...
                                  'test4', struct('filename', 'HINT_L10_s1.wav', 'list', 10, 'sent', 1),...
                                  'test5', struct('filename', 'HINT_L10_s10.wav', 'list', 10, 'sent', 10));
                              
        % testNum2Words
        num2word_cases = struct('test0', struct('num', 0, 'word', 'zero'),...
                                'test1', struct('num', 1, 'word', 'one'),...
                                'test2', struct('num', 2, 'word', 'two'),...
                                'test3', struct('num', 3, 'word', 'three'),...
                                'test4', struct('num', 4, 'word', 'four'),...
                                'test5', struct('num', 5, 'word', 'five'),...
                                'test6', struct('num', 6, 'word', 'six'),...
                                'test7', struct('num', 7, 'word', 'seven'),...
                                'test8', struct('num', 8, 'word', 'eight'),...
                                'test9', struct('num', 9, 'word', 'nine'),...
                                'test10', struct('num', 10, 'word', 'ten'),...
                                'test11', struct('num', 11, 'word', 'eleven'),...
                                'test12', struct('num', 12, 'word', 'twelve'),...
                                'test13', struct('num', 13, 'word', 'thirteen'),...
                                'test14', struct('num', 14, 'word', 'fourteen'),...
                                'test15', struct('num', 15, 'word', 'fifteen'),...
                                'test16', struct('num', 16, 'word', 'sixteen'),...
                                'test17', struct('num', 17, 'word', 'seventeen'),...
                                'test18', struct('num', 18, 'word', 'eighteen'),...
                                'test19', struct('num', 19, 'word', 'nineteen'));
                            
    
        % testFormatSentences
        format_sent_cases = struct('test1', struct('input', 'hello world', 'exp', 'HELLO WORLD'),...
                                   'test2', struct('input', 'Hello world', 'exp', 'HELLO WORLD'),...
                                   'test3', struct('input', 'HELLO WORLD', 'exp', 'HELLO WORLD'),...
                                   'test4', struct('input', '1', 'exp', 'ONE'),...
                                   'test5', struct('input', '1 day', 'exp', 'ONE DAY'),...
                                   'test6', struct('input', 'day 1', 'exp', 'DAY ONE'),...
                                   'test7', struct('input', 'day 1 of', 'exp', 'DAY ONE OF'),...
                                   'test8', struct('input', '1a', 'exp', '1A'),...
                                   'test9', struct('input', 'a1', 'exp', 'A1'),...
                                   'test10', struct('input', 'a1a', 'exp', 'A1A'),...
                                   'test11', struct('input', 'HELLO WORLD.', 'exp', 'HELLO WORLD'),...
                                   'test12', struct('input', 'HELLO WORLD!', 'exp', 'HELLO WORLD'),...
                                   'test13', struct('input', ',HELLO WORLD', 'exp', 'HELLO WORLD'),...
                                   'test14', struct('input', 'HELLO, WORLD', 'exp', 'HELLO WORLD'),...
                                   'test15', struct('input', 'HELLO,, WORLD', 'exp', 'HELLO WORLD'),...
                                   'test16', struct('input', 'HELLO ,WORLD', 'exp', 'HELLO WORLD'),...
                                   'test17', struct('input', 'HELLO,WORLD', 'exp', 'HELLO WORLD'),...
                                   'test18', struct('input', 'HE,LLO WORLD', 'exp', 'HE LLO WORLD'),...
                                   'test19', struct('input', 'HELLO  WORLD', 'exp', 'HELLO WORLD'),...
                                   'test20', struct('input', 'HELLO WORLD..', 'exp', 'HELLO WORLD'),...
                                   'test21', struct('input', 'IT''S', 'exp', 'IT''S'),...
                                   'test22', struct('input', 'A/THE', 'exp', 'A/THE'),...
                                   'test23', struct('input', '(A/THE)', 'exp', 'A/THE'),...
                                   'test24', struct('input', '.', 'exp', ''),...
                                   'test25', struct('input', '''', 'exp', ''''),...
                                   'test26', struct('input', '/', 'exp', '/'),...
                                   'test27', struct('input', 'i don''t know', 'exp', 'I DON''T KNOW'),...
                                   'test28', struct('input', 'I don''t know', 'exp', 'I DON''T KNOW'),...
                                   'test29', struct('input', 'I don''t know.', 'exp', 'I DON''T KNOW'));
    
    % testCalculateNumCorrectWords
    correct_word_cases = struct('test1', struct('response', 'FOO', 'correct', 'BAR', 'exp', 0),...
                                'test2', struct('response', 'FOO', 'correct', 'FOO', 'exp', 1),...
                                'test3', struct('response', 'FOO', 'correct', 'FOE', 'exp', 0),...
                                'test4', struct('response', 'FOO', 'correct', 'FOO BAR', 'exp', 1),...
                                'test5', struct('response', 'BAR', 'correct', 'FOO BAR', 'exp', 1),...
                                'test6', struct('response', 'FOO BAR', 'correct', 'FOO BAR', 'exp', 2),...
                                'test7', struct('response', 'FOOBAR', 'correct', 'FOO BAR', 'exp', 0),...
                                'test8', struct('response', 'FOOS', 'correct', 'FOO', 'exp', 0),...
                                'test9', struct('response', 'FOO BAR', 'correct', 'FOO', 'exp', 1),...
                                'test10', struct('response', 'BAR FOO', 'correct', 'FOO BAR', 'exp', 2),...
                                'test11', struct('response', 'A', 'correct', 'A/THE', 'exp', 1),...
                                'test12', struct('response', 'THE', 'correct', 'A/THE', 'exp', 1),...
                                'test13', struct('response', 'A THE', 'correct', 'A/THE', 'exp', 1),...
                                'test14', struct('response', 'FOO', 'correct', 'FOO FOO', 'exp', 1),...
                                'test15', struct('response', 'FOO FOO', 'correct', 'FOO', 'exp', 1),...
                                'test16', struct('response', 'FOO FOO', 'correct', 'FOO FOO', 'exp', 2),...
                                'test17', struct('response', 'ITS', 'correct', 'IT''S', 'exp', 0),...
                                'test18', struct('response', 'IT''S', 'correct', 'ITS', 'exp', 0),...
                                'test19', struct('response', 'I DON''T KNOW', 'correct', 'FOO BAR', 'exp', 0),...
                                'test20', struct('response', 'I DON''T KNOW', 'correct', 'I', 'exp', 0),...
                                'test21', struct('response', 'I DON''T KNOW', 'correct', 'DON''T', 'exp', 0),...
                                'test22', struct('response', 'I DON''T KNOW', 'correct', 'KNOW', 'exp', 0),...
                                'test23', struct('response', 'I DONT KNOW', 'correct', 'I', 'exp', 1));                
    
    task_info_cases = struct('test1', struct('taskInfo', struct('condition','condition1','correct_words',1,'total_words',2,'score',0.5),...
                                             'exp', struct('condition','condition1','correct_words',1,'total_words',2,'score',0.5)),...
                             'test2', struct('taskInfo', struct('condition',{'condition1';'condition2'},'correct_words',{1;2},'total_words',{2;2},'score',{0.5;1}),...
                                             'exp', struct('condition',{'condition1';'condition2'},'correct_words',{1;2},'total_words',{2;2},'score',{0.5;1})),...
                             'test3', struct('taskInfo', struct('condition',{'condition1';'condition1'},'correct_words',{1;2},'total_words',{2;2},'score',{0.5;1}),...
                                             'exp', struct('condition','condition1','correct_words',3,'total_words',4,'score',0.75)),...
                             'test4', struct('taskInfo', struct('condition',{'condition1';'condition1';'condition2';'condition2'},'correct_words',{1;2;0;2},'total_words',{2;2;2;2},'score',{0.5;1;0;1}),...
                                             'exp', struct('condition',{'condition1';'condition2'},'correct_words',{3;2},'total_words',{4;4},'score',{0.75;0.5})),...
                             'test5', struct('taskInfo', struct('conditionA','A1','conditionB','B1','correct_words',1,'total_words',2,'score',0.5),...
                                             'exp', struct('conditionA','A1','conditionB','B1','correct_words',1,'total_words',2,'score',0.5)),...
                             'test6', struct('taskInfo', struct('conditionA',{'A1';'A2'},'conditionB',{'B1';'B1'},'correct_words',{1;2},'total_words',{2;2},'score',{0.5;1}),...
                                             'exp', struct('conditionA',{'A1';'A2'},'conditionB',{'B1';'B1'},'correct_words',{1;2},'total_words',{2;2},'score',{0.5;1})));
                            
    end
    
    methods (Test)
        
        function testParseFilename(testCase, file_parse_cases)
            % Expected structure
            expFile.list = file_parse_cases.list;
            expFile.sent = file_parse_cases.sent;
            % Actual structure
            actFile = parseFilename(file_parse_cases.filename);
            testCase.verifyEqual(actFile, expFile);
        end
        
        function testNum2Words(testCase, num2word_cases)
            % Expected word
            expWord = num2word_cases.word;
            % Actual
            actWord = num2words(num2word_cases.num);
            testCase.verifyEqual(actWord, expWord);
        end
        
        function testFormatSentences(testCase, format_sent_cases)
            % Expected
            expSent = format_sent_cases.exp;
            % Actual
            actSent = formatSentence(format_sent_cases.input);
            testCase.verifyEqual(actSent, expSent);
        end
        
        function testCalculateNumCorrectWords(testCase, correct_word_cases)
            % Expected
            expCorrect = correct_word_cases.exp;
            % Actual
            actCorrect = calculateNumCorrectWords(correct_word_cases.response, correct_word_cases.correct);
            testCase.verifyEqual(actCorrect, expCorrect);
        end
        
        function testCombineScoresRepeatedTasks(testCase, task_info_cases)
            % Expected
            expTaskInfo = task_info_cases.exp;
            % Actual
            actTaskInfo = combineScoresRepeatedTasks(task_info_cases.taskInfo);
            testCase.verifyEqual(actTaskInfo, expTaskInfo);
        end
        
    end
    
end